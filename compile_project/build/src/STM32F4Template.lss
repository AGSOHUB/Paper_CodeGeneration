
STM32F4Template.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 61 04 00 08 a9 04 00 08 a9 04 00 08     ... a...........
 8000010:	a9 04 00 08 a9 04 00 08 a9 04 00 08 00 00 00 00     ................
	...
 800002c:	a9 04 00 08 a9 04 00 08 00 00 00 00 a9 04 00 08     ................
 800003c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800004c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800005c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800006c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800007c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800008c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800009c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000ac:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000bc:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000cc:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000dc:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000ec:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 80000fc:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800010c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800011c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800012c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800013c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800014c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800015c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800016c:	a9 04 00 08 a9 04 00 08 a9 04 00 08 a9 04 00 08     ................
 800017c:	a9 04 00 08 a9 04 00 08 a9 04 00 08                 ............

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000514 	.word	0x08000514

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000514 	.word	0x08000514

080001c8 <hardware_abstraction_layer_function_gpio_toggle_pin>:
 */
void hardware_abstraction_layer_function_gpio_toggle_pin(uint32_t gpio_port_base, uint32_t pin_mask) {
    // Calculate the address of the Output Data Register (ODR)
    volatile uint32_t *ODR = (uint32_t *)(gpio_port_base + 0x14);
    // Determine the bit position of the pin
    uint32_t pin_position = 0;
 80001c8:	2200      	movs	r2, #0
    while ((pin_mask >> pin_position) != 1) {
 80001ca:	fa21 f302 	lsr.w	r3, r1, r2
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d104      	bne.n	80001dc <hardware_abstraction_layer_function_gpio_toggle_pin+0x14>
        pin_position++;
    }
    // Toggle the pin: use bitwise XOR to toggle the specific bit
    *ODR ^= (1 << pin_position);
 80001d2:	6941      	ldr	r1, [r0, #20]
 80001d4:	4093      	lsls	r3, r2
 80001d6:	404b      	eors	r3, r1
 80001d8:	6143      	str	r3, [r0, #20]
}
 80001da:	4770      	bx	lr
        pin_position++;
 80001dc:	3201      	adds	r2, #1
 80001de:	e7f4      	b.n	80001ca <hardware_abstraction_layer_function_gpio_toggle_pin+0x2>

080001e0 <set_input_output_mode>:
 * @param gpio_base The base address of the GPIO port (e.g., 0x40020000 for GPIOA).
 * @param pin_mask The mask of the pin to configure (e.g., 1 << 5 for pin 5).
 * @param mode The mode to set for the pin: 0 for input, 1 for output.
 * @return None
 */
void set_input_output_mode(uint32_t gpio_base, uint32_t pin_mask, uint8_t mode) {
 80001e0:	b530      	push	{r4, r5, lr}
    // Calculate the pin number from the pin mask
    uint8_t pin_number = 0;
    while ((pin_mask >> pin_number) != 1) {
 80001e2:	2400      	movs	r4, #0
 80001e4:	b2e3      	uxtb	r3, r4
 80001e6:	fa21 f503 	lsr.w	r5, r1, r3
 80001ea:	2d01      	cmp	r5, #1
 80001ec:	f104 0401 	add.w	r4, r4, #1
 80001f0:	d1f8      	bne.n	80001e4 <set_input_output_mode+0x4>
        pin_number++;
    }
    // Calculate the address of the GPIO mode register (MODER)
    volatile uint32_t *MODER = (uint32_t *)(gpio_base + 0x00);
    // Clear the two bits corresponding to the pin number
    *MODER &= ~(0x3 << (pin_number * 2));
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	005b      	lsls	r3, r3, #1
 80001f6:	2403      	movs	r4, #3
 80001f8:	409c      	lsls	r4, r3
 80001fa:	ea21 0104 	bic.w	r1, r1, r4
 80001fe:	6001      	str	r1, [r0, #0]
    // Set the mode for the pin: 0 for input, 1 for output
    *MODER |= (mode << (pin_number * 2));
 8000200:	6801      	ldr	r1, [r0, #0]
 8000202:	409a      	lsls	r2, r3
 8000204:	430a      	orrs	r2, r1
 8000206:	6002      	str	r2, [r0, #0]
}
 8000208:	bd30      	pop	{r4, r5, pc}

0800020a <hardware_abstraction_layer_function_gpio_write_pin>:
 * @param gpio_port_base The base address of the GPIO port (e.g., 0x40020000 for GPIOA).
 * @param pin_mask A bitmask representing the pin to write to (e.g., 1 << 5 for pin 5).
 * @param value The value to write to the pin (0 to clear, any non-zero value to set).
 * @return None
 */
void hardware_abstraction_layer_function_gpio_write_pin(uint32_t gpio_port_base, uint32_t pin_mask, uint32_t value) {
 800020a:	b510      	push	{r4, lr}
    // Calculate the address of the Output Data Register (ODR)
    volatile uint32_t *ODR = (uint32_t *)(gpio_port_base + 0x14);
    // Determine the bit position of the pin
    uint32_t pin_position = 0;
 800020c:	2400      	movs	r4, #0
    while ((pin_mask >> pin_position) != 1) {
 800020e:	fa21 f304 	lsr.w	r3, r1, r4
 8000212:	2b01      	cmp	r3, #1
 8000214:	d105      	bne.n	8000222 <hardware_abstraction_layer_function_gpio_write_pin+0x18>
        pin_position++;
    }
    // Write the value to the pin using bitwise operations
    if (value) {
        // Set the pin high
        *ODR |= (1 << pin_position);
 8000216:	40a3      	lsls	r3, r4
    if (value) {
 8000218:	b12a      	cbz	r2, 8000226 <hardware_abstraction_layer_function_gpio_write_pin+0x1c>
        *ODR |= (1 << pin_position);
 800021a:	6942      	ldr	r2, [r0, #20]
 800021c:	4313      	orrs	r3, r2
    } else {
        // Set the pin low
        *ODR &= ~(1 << pin_position);
 800021e:	6143      	str	r3, [r0, #20]
    }
}
 8000220:	bd10      	pop	{r4, pc}
        pin_position++;
 8000222:	3401      	adds	r4, #1
 8000224:	e7f3      	b.n	800020e <hardware_abstraction_layer_function_gpio_write_pin+0x4>
        *ODR &= ~(1 << pin_position);
 8000226:	6942      	ldr	r2, [r0, #20]
 8000228:	ea22 0303 	bic.w	r3, r2, r3
 800022c:	e7f7      	b.n	800021e <hardware_abstraction_layer_function_gpio_write_pin+0x14>
	...

08000230 <ENABLE_GPIOA_CLOCK>:
 */
void ENABLE_GPIOA_CLOCK(void) {
    // Define the base address for the RCC AHB1 peripheral clock enable register
    volatile uint32_t *RCC_AHB1ENR = (uint32_t *)(0x40023800 + 0x30); // RCC base address + AHB1ENR offset
    // Set the bit 0 to enable the clock for GPIOA
    *RCC_AHB1ENR |= (1 << 0);
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <ENABLE_GPIOA_CLOCK+0x10>)
 8000232:	f8d2 3830 	ldr.w	r3, [r2, #2096]	@ 0x830
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830
}
 800023e:	4770      	bx	lr
 8000240:	40023000 	.word	0x40023000

08000244 <hardware_abstraction_layer_function_gpio_read_pin>:
int hardware_abstraction_layer_function_gpio_read_pin(uint32_t gpio_port_base, uint32_t pin_mask) {
    // Calculate the address of the Input Data Register (IDR)
    volatile uint32_t *IDR = (uint32_t *)(gpio_port_base + 0x10);
    
    // Determine the bit position of the pin
    uint32_t pin_position = 0;
 8000244:	2200      	movs	r2, #0
    while ((pin_mask >> pin_position) != 1) {
 8000246:	fa21 f302 	lsr.w	r3, r1, r2
 800024a:	2b01      	cmp	r3, #1
 800024c:	d106      	bne.n	800025c <hardware_abstraction_layer_function_gpio_read_pin+0x18>
        pin_position++;
    }
    
    // Read the pin state: use bitwise AND to check the specific bit
    return ((*IDR & (1 << pin_position)) != 0) ? 1 : 0;
 800024e:	6901      	ldr	r1, [r0, #16]
 8000250:	4093      	lsls	r3, r2
 8000252:	420b      	tst	r3, r1
}
 8000254:	bf14      	ite	ne
 8000256:	2001      	movne	r0, #1
 8000258:	2000      	moveq	r0, #0
 800025a:	4770      	bx	lr
        pin_position++;
 800025c:	3201      	adds	r2, #1
 800025e:	e7f2      	b.n	8000246 <hardware_abstraction_layer_function_gpio_read_pin+0x2>

08000260 <usart2_init>:
void usart2_init() {
    volatile uint32_t *USART2_CR1 = (uint32_t *)(USART2_BASE + USART_CR1_OFFSET);
    volatile uint32_t *USART2_BRR = (uint32_t *)(USART2_BASE + USART_BRR_OFFSET);

    // Set the baud rate (assuming 16MHz clock, 9600 baud rate)
    *USART2_BRR = 0x683; // Example value for 9600 baud
 8000260:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000264:	f240 6383 	movw	r3, #1667	@ 0x683
 8000268:	f8c2 3408 	str.w	r3, [r2, #1032]	@ 0x408

    // Enable USART, Transmitter, and Receiver
    *USART2_CR1 |= (1 << 13) |  // UE: USART Enable
 800026c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8000270:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000274:	f043 0308 	orr.w	r3, r3, #8
 8000278:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
                   (1 << 3);    // TE: Transmitter Enable
}
 800027c:	4770      	bx	lr

0800027e <print>:
// Function to send data over USART2
void print(char *data) {
    volatile uint32_t *USART2_SR = (uint32_t *)(USART2_BASE + USART_SR_OFFSET);
    volatile uint32_t *USART2_DR = (uint32_t *)(USART2_BASE + USART_DR_OFFSET);

    while (*data) {
 800027e:	3801      	subs	r0, #1
        while (!(*USART2_SR & USART_FLAG_TXE)); // Wait until TX is ready
 8000280:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
    while (*data) {
 8000284:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000288:	b94b      	cbnz	r3, 800029e <print+0x20>
        *USART2_DR = (uint8_t)(*data++);
    }
    while (!(*USART2_SR & USART_FLAG_TXE)); // Wait until TX is ready
 800028a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800028e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8000292:	0612      	lsls	r2, r2, #24
 8000294:	d5fb      	bpl.n	800028e <print+0x10>
    *USART2_DR = '\n';
 8000296:	220a      	movs	r2, #10
 8000298:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
}
 800029c:	4770      	bx	lr
        while (!(*USART2_SR & USART_FLAG_TXE)); // Wait until TX is ready
 800029e:	f8d2 1400 	ldr.w	r1, [r2, #1024]	@ 0x400
 80002a2:	0609      	lsls	r1, r1, #24
 80002a4:	d5fb      	bpl.n	800029e <print+0x20>
        *USART2_DR = (uint8_t)(*data++);
 80002a6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 80002aa:	e7eb      	b.n	8000284 <print+0x6>

080002ac <int_to_string>:

// Simple function to convert an integer to a string (base 10)
void int_to_string(int num, char *str) {
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i = 0;
    int is_negative = 0;

    // Handle negative numbers
    if (num < 0) {
 80002ae:	2800      	cmp	r0, #0
        is_negative = 1;
        num = -num;
 80002b0:	f101 34ff 	add.w	r4, r1, #4294967295
 80002b4:	bfba      	itte	lt
 80002b6:	4240      	neglt	r0, r0
        is_negative = 1;
 80002b8:	2501      	movlt	r5, #1
    int is_negative = 0;
 80002ba:	2500      	movge	r5, #0
        is_negative = 1;
 80002bc:	4627      	mov	r7, r4
 80002be:	2300      	movs	r3, #0
    }

    // Process each digit
    do {
        str[i++] = (num % 10) + '0';
 80002c0:	f04f 0c0a 	mov.w	ip, #10
 80002c4:	fbb0 f6fc 	udiv	r6, r0, ip
 80002c8:	fb0c 0216 	mls	r2, ip, r6, r0
 80002cc:	3230      	adds	r2, #48	@ 0x30
 80002ce:	f807 2f01 	strb.w	r2, [r7, #1]!
 80002d2:	4602      	mov	r2, r0
        num /= 10;
    } while (num > 0);
 80002d4:	2a09      	cmp	r2, #9
 80002d6:	469e      	mov	lr, r3
        num /= 10;
 80002d8:	4630      	mov	r0, r6
        str[i++] = (num % 10) + '0';
 80002da:	f103 0301 	add.w	r3, r3, #1
    } while (num > 0);
 80002de:	dcf1      	bgt.n	80002c4 <int_to_string+0x18>

    // If the number is negative, add the negative sign
    if (is_negative) {
 80002e0:	b11d      	cbz	r5, 80002ea <int_to_string+0x3e>
        str[i++] = '-';
 80002e2:	222d      	movs	r2, #45	@ 0x2d
 80002e4:	54ca      	strb	r2, [r1, r3]
 80002e6:	f10e 0302 	add.w	r3, lr, #2
    }

    // Null-terminate the string
    str[i] = '\0';
 80002ea:	2200      	movs	r2, #0
 80002ec:	54ca      	strb	r2, [r1, r3]

    // Reverse the string
    int start = 0;
    int end = i - 1;
    while (start < end) {
 80002ee:	4419      	add	r1, r3
 80002f0:	3b01      	subs	r3, #1
 80002f2:	1a98      	subs	r0, r3, r2
 80002f4:	4290      	cmp	r0, r2
 80002f6:	dc00      	bgt.n	80002fa <int_to_string+0x4e>
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        char temp = str[start];
 80002fa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
        str[start] = str[end];
 80002fe:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8000302:	7025      	strb	r5, [r4, #0]
        start++;
 8000304:	3201      	adds	r2, #1
        str[end] = temp;
 8000306:	7008      	strb	r0, [r1, #0]
        end--;
 8000308:	e7f3      	b.n	80002f2 <int_to_string+0x46>
	...

0800030c <main>:
int is_gpioa_clock_enabled(void) {
    volatile uint32_t *RCC_AHB1ENR = (uint32_t *)(RCC_BASE + RCC_AHB1ENR_OFFSET);
    return ((*RCC_AHB1ENR & (1 << 0)) != 0) ? 1 : 0;
}

int main() {
 800030c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    usart2_init();
 800030e:	f7ff ffa7 	bl	8000260 <usart2_init>
    int successful_functions = 0;  // Bitmask to track successful tests

    // Enable the clock for GPIOA
    ENABLE_GPIOA_CLOCK();
 8000312:	f7ff ff8d 	bl	8000230 <ENABLE_GPIOA_CLOCK>
    return ((*RCC_AHB1ENR & (1 << 0)) != 0) ? 1 : 0;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <main+0x58>)
        // print("Log: Failed to enable GPIOA clock!\n");
        successful_functions |= 0 << 0;  // First test failes, set bit 0 to 0
    }

    // Configure GPIOA Pin 5 as output after enabling the clock
    set_input_output_mode(0x40020000, 1 << 5, 1);  // GPIOA_BASE = 0x40020000
 8000318:	4813      	ldr	r0, [pc, #76]	@ (8000368 <main+0x5c>)
    return ((*RCC_AHB1ENR & (1 << 0)) != 0) ? 1 : 0;
 800031a:	f8d3 4830 	ldr.w	r4, [r3, #2096]	@ 0x830
    set_input_output_mode(0x40020000, 1 << 5, 1);  // GPIOA_BASE = 0x40020000
 800031e:	2201      	movs	r2, #1
 8000320:	2120      	movs	r1, #32
 8000322:	f7ff ff5d 	bl	80001e0 <set_input_output_mode>

    // Write to GPIOA Pin 5 after enabling the clock
    hardware_abstraction_layer_function_gpio_write_pin(0x40020000, 1 << 5, 1);
 8000326:	2201      	movs	r2, #1
 8000328:	2120      	movs	r1, #32
 800032a:	f004 0401 	and.w	r4, r4, #1
 800032e:	f7ff ff6c 	bl	800020a <hardware_abstraction_layer_function_gpio_write_pin>

    // Check if the pin is set to high
    if (hardware_abstraction_layer_function_gpio_read_pin(0x40020000, 1 << 5)) {
 8000332:	f7ff ff87 	bl	8000244 <hardware_abstraction_layer_function_gpio_read_pin>
 8000336:	b108      	cbz	r0, 800033c <main+0x30>
        // print("Test: Pin is correctly set to HIGH after enabling clock!\n");
        successful_functions |= 1 << 1;  // Second test passed, set bit 1
 8000338:	f044 0402 	orr.w	r4, r4, #2
        // print("Test: Pin is NOT set to HIGH after enabling clock.\n");
        successful_functions |= 0 << 1;  // Second test failes, set to 0
    }

    // Toggle the pin to low
    hardware_abstraction_layer_function_gpio_toggle_pin(0x40020000, 1 << 5);
 800033c:	2120      	movs	r1, #32
 800033e:	480a      	ldr	r0, [pc, #40]	@ (8000368 <main+0x5c>)
 8000340:	f7ff ff42 	bl	80001c8 <hardware_abstraction_layer_function_gpio_toggle_pin>

    // Check if the pin is toggled to low
    if (!hardware_abstraction_layer_function_gpio_read_pin(0x40020000, 1 << 5)) {
 8000344:	2120      	movs	r1, #32
 8000346:	f7ff ff7d 	bl	8000244 <hardware_abstraction_layer_function_gpio_read_pin>
 800034a:	b138      	cbz	r0, 800035c <main+0x50>
 800034c:	4620      	mov	r0, r4
        successful_functions |= 0 << 2;  // Third test failes, set bit 2 to 0
    }

    // Convert the integer to a string
    char number_str[12];  // Buffer for the integer-to-string conversion
    int_to_string(successful_functions, number_str);  // Convert the integer to string
 800034e:	a901      	add	r1, sp, #4
 8000350:	f7ff ffac 	bl	80002ac <int_to_string>

    // Print the resulting string
    print(number_str);
 8000354:	a801      	add	r0, sp, #4
 8000356:	f7ff ff92 	bl	800027e <print>


    // Loop forever
    while (1);
 800035a:	e7fe      	b.n	800035a <main+0x4e>
        successful_functions |= 1 << 2;  // Third test passed, set bit 2
 800035c:	f044 0004 	orr.w	r0, r4, #4
 8000360:	e7f5      	b.n	800034e <main+0x42>
 8000362:	bf00      	nop
 8000364:	40023000 	.word	0x40023000
 8000368:	40020000 	.word	0x40020000

0800036c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800036c:	4a36      	ldr	r2, [pc, #216]	@ (8000448 <SystemInit+0xdc>)
 800036e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000376:	b082      	sub	sp, #8
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800037c:	4b33      	ldr	r3, [pc, #204]	@ (800044c <SystemInit+0xe0>)
 800037e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000380:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000382:	f042 0201 	orr.w	r2, r2, #1
 8000386:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000388:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000390:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000394:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000396:	4a2e      	ldr	r2, [pc, #184]	@ (8000450 <SystemInit+0xe4>)
 8000398:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80003a0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003a2:	60d9      	str	r1, [r3, #12]
{
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003a4:	9100      	str	r1, [sp, #0]
 80003a6:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80003ae:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80003b6:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80003b8:	9a00      	ldr	r2, [sp, #0]
 80003ba:	3201      	adds	r2, #1
 80003bc:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003be:	9a01      	ldr	r2, [sp, #4]
 80003c0:	b91a      	cbnz	r2, 80003ca <SystemInit+0x5e>
 80003c2:	9a00      	ldr	r2, [sp, #0]
 80003c4:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 80003c8:	d1f2      	bne.n	80003b0 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80003d0:	bf18      	it	ne
 80003d2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003d4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003d6:	9b01      	ldr	r3, [sp, #4]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d12e      	bne.n	800043a <SystemInit+0xce>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <SystemInit+0xe0>)
    PWR->CR |= PWR_CR_VOS;
 80003de:	491d      	ldr	r1, [pc, #116]	@ (8000454 <SystemInit+0xe8>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80003e6:	641a      	str	r2, [r3, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 80003e8:	680a      	ldr	r2, [r1, #0]
 80003ea:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80003ee:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003f0:	689a      	ldr	r2, [r3, #8]
 80003f2:	609a      	str	r2, [r3, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80003fa:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8000402:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <SystemInit+0xec>)
 8000406:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800040e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	0192      	lsls	r2, r2, #6
 8000414:	d5fc      	bpl.n	8000410 <SystemInit+0xa4>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000416:	4a11      	ldr	r2, [pc, #68]	@ (800045c <SystemInit+0xf0>)
 8000418:	f240 7105 	movw	r1, #1797	@ 0x705
 800041c:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	f022 0203 	bic.w	r2, r2, #3
 8000424:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	f042 0202 	orr.w	r2, r2, #2
 800042c:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800042e:	4a07      	ldr	r2, [pc, #28]	@ (800044c <SystemInit+0xe0>)
 8000430:	6893      	ldr	r3, [r2, #8]
 8000432:	f003 030c 	and.w	r3, r3, #12
 8000436:	2b08      	cmp	r3, #8
 8000438:	d1fa      	bne.n	8000430 <SystemInit+0xc4>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800043a:	4b03      	ldr	r3, [pc, #12]	@ (8000448 <SystemInit+0xdc>)
 800043c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000440:	609a      	str	r2, [r3, #8]
}
 8000442:	b002      	add	sp, #8
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00
 800044c:	40023800 	.word	0x40023800
 8000450:	24003010 	.word	0x24003010
 8000454:	40007000 	.word	0x40007000
 8000458:	07405419 	.word	0x07405419
 800045c:	40023c00 	.word	0x40023c00

08000460 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000462:	e003      	b.n	800046c <LoopCopyDataInit>

08000464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800046a:	3104      	adds	r1, #4

0800046c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800046c:	480a      	ldr	r0, [pc, #40]	@ (8000498 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000474:	d3f6      	bcc.n	8000464 <CopyDataInit>
  ldr  r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000478:	e002      	b.n	8000480 <LoopFillZerobss>

0800047a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800047a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800047c:	f842 3b04 	str.w	r3, [r2], #4

08000480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000484:	d3f9      	bcc.n	800047a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000486:	f7ff ff71 	bl	800036c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f000 f80f 	bl	80004ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800048e:	f7ff ff3d 	bl	800030c <main>
  bx  lr    
 8000492:	4770      	bx	lr
  ldr  r3, =_sidata
 8000494:	08000518 	.word	0x08000518
  ldr  r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800049c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80004a0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80004a4:	20000024 	.word	0x20000024

080004a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC_IRQHandler>
	...

080004ac <__libc_init_array>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <__libc_init_array+0x40>)
 80004b0:	4d0f      	ldr	r5, [pc, #60]	@ (80004f0 <__libc_init_array+0x44>)
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	eba3 0605 	sub.w	r6, r3, r5
 80004b8:	d007      	beq.n	80004ca <__libc_init_array+0x1e>
 80004ba:	10b6      	asrs	r6, r6, #2
 80004bc:	2400      	movs	r4, #0
 80004be:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c2:	3401      	adds	r4, #1
 80004c4:	4798      	blx	r3
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d8f9      	bhi.n	80004be <__libc_init_array+0x12>
 80004ca:	f000 f817 	bl	80004fc <_init>
 80004ce:	4d09      	ldr	r5, [pc, #36]	@ (80004f4 <__libc_init_array+0x48>)
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <__libc_init_array+0x4c>)
 80004d2:	1b5e      	subs	r6, r3, r5
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80004da:	d006      	beq.n	80004ea <__libc_init_array+0x3e>
 80004dc:	2400      	movs	r4, #0
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	3401      	adds	r4, #1
 80004e4:	4798      	blx	r3
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d8f9      	bhi.n	80004de <__libc_init_array+0x32>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000004 	.word	0x20000004

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <__EH_FRAME_BEGIN__>:
 8000514:	0000 0000                                   ....
